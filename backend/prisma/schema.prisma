generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "scheme.md"
// }

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model user {
  id             String @id @default(cuid())
  name           String @default("")
  phone          String @default("")
  email          String @unique
  instance_limit Int    @default(10)
  node_limit     Int    @default(3)
  password_hash  String @unique
  password_salt  String @unique
  permission     String
  retry_count    Int    @default(0)

  activated                  Boolean   @default(false)
  email_confirmation_hash    String?
  email_confirmation_expires DateTime?
  code_confirmation          String?
  code_confirmation_expires  DateTime?

  created_at DateTime @default(now())

  ssh_keys              ssh_key[]
  api_keys              api_key[]
  compute_nodes         compute_node[]
  managed_compute_nodes managed_compute_node[]
  managed_images        managed_image[]
  managed_instances     managed_instance[]

  @@index([email, password_hash], name: "user_email_password_index")
  @@index([email_confirmation_hash], name: "user_email_confirmation_hash_index")
}

model ssh_key {
  id         String   @id @default(cuid())
  key        String   @unique
  name       String
  user_id    String
  created_at DateTime @default(now())

  user user @relation(fields: [user_id], references: [id])

  @@index([user_id], name: "ssh_key_user_id_index")
}

model api_key {
  id         String   @id // Generated by the server
  hash       String   @unique
  salt       String   @unique
  name       String   @default("")
  user_id    String
  created_at DateTime @default(now())

  user user @relation(fields: [user_id], references: [id])

  @@index([user_id], name: "api_key_user_id_index")
}

model image {
  id               String   @id @default(cuid())
  name             String?
  status           String?
  key              String?
  url              String?
  remote           String?
  size             Int? // in MB
  os_hint          String?
  description      String?
  published        Boolean?
  node_id          String
  native_timestamp DateTime @default(now())
  created_at       DateTime @default(now())

  compute_node   compute_node    @relation(fields: [node_id], references: [id])
  instances      instance[]
  managed_images managed_image[]

  // @@unique([node_id, url], name: "image_id_url_unique")
  @@index([key], name: "image_key_index")
  @@index([node_id], name: "image_node_id_index")
}

model compute_node {
  id                    String   @id @default(cuid())
  arch                  String?
  available_as_gpu_node Boolean?
  cpu                   Int?
  cpu_info              String?
  free_storage          Int? // in MB
  gpu                   Boolean?
  gpu_driver            String?
  gpu_info              String?
  ipv4                  String?
  ipv4_ports            String? // TODO Length
  ipv6                  String?
  ipv6_ports            String? // TODO Length
  manipulator_driver    String?
  memory                Int? // in MB
  name                  String   @default("Unknown")
  nvidia_docker         Boolean?
  platform              String?
  status                String   @default("INITIALIZING")
  total_storage         Int? // in MB
  use_ipv4              Boolean?
  use_ipv6              Boolean?
  user_id               String

  updated_at DateTime @default(now())
  created_at DateTime @default(now())

  user      user       @relation(fields: [user_id], references: [id])
  images    image[]
  instances instance[]
  port_maps port_map[]

  managed_compute_nodes managed_compute_node[]
  managed_images        managed_image[]
  managed_instances     managed_instance[]

  @@index([user_id], name: "compute_node_user_id_index")
}

model instance {
  id            String   @id @default(cuid())
  name          String?
  key           String?  @unique
  ipv4          String?
  ipv6          String?
  local_ipv4    String?
  local_ipv6    String?
  cpu           Int?
  memory        Int? // in MB
  storage       Int? // in MB
  total_storage Int? // in MB
  status        String?
  status_info   String?
  description   String?
  network_mode  String?
  ssh_key_name  String?
  ssh_key       String?
  node_id       String
  image_id      String?
  base_image    String? // Cache name
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())

  managed_instance managed_instance[]
  port_maps        port_map[]

  compute_node compute_node @relation(fields: [node_id], references: [id])
  image        image?       @relation(fields: [image_id], references: [id])

  @@index([node_id], name: "instance_node_id_index")
}

model managed_compute_node {
  id         String   @id @default(cuid())
  node_id    String
  user_id    String
  created_at DateTime @default(now())

  compute_node compute_node @relation(fields: [node_id], references: [id])
  user         user         @relation(fields: [user_id], references: [id])

  @@index([node_id], name: "managed_compute_node_node_id_index")
  @@index([user_id], name: "managed_compute_node_user_id_index")
}

model managed_image {
  id         String   @id @default(cuid())
  image_id   String?
  node_id    String
  user_id    String
  created_at DateTime @default(now())

  compute_node compute_node @relation(fields: [node_id], references: [id])
  user         user         @relation(fields: [user_id], references: [id])
  image        image?       @relation(fields: [image_id], references: [id])

  @@index([image_id], name: "managed_image_image_id_index")
  @@index([node_id], name: "managed_image_node_id_index")
  @@index([user_id], name: "managed_image_user_id_index")
}

model managed_instance {
  id          String   @id @default(cuid())
  instance_id String?
  node_id     String
  user_id     String
  created_at  DateTime @default(now())

  compute_node compute_node @relation(fields: [node_id], references: [id])
  user         user         @relation(fields: [user_id], references: [id])
  instance     instance?    @relation(fields: [instance_id], references: [id])

  @@index([instance_id], name: "managed_instance_instance_id_index")
  @@index([node_id], name: "managed_instance_node_id_index")
  @@index([user_id], name: "managed_instance_user_id_index")
}

model port_map {
  id          String   @id @default(cuid())
  node_id     String
  instance_id String?
  is_ipv4     Boolean?
  is_ipv6     Boolean?
  managed     Boolean?
  name        String?
  port        Int?
  protocol    String?
  created_at  DateTime @default(now())

  compute_node compute_node @relation(fields: [node_id], references: [id])
  instance     instance?    @relation(fields: [instance_id], references: [id])

  @@index([node_id], name: "port_map_node_id_index")
}

model log {
  id          String   @id @default(cuid())
  title       String?
  description String?
  host        String?
  ip          String?
  timestamp   DateTime @default(now())
}

model test_a {
  id          String   @id @default(cuid())
  title       String?
  description String?
  big_int     BigInt?
  timestamp   DateTime @default(now())

  test_b test_b[]
}

model test_b {
  id          String   @id @default(cuid())
  title       String?
  description String?
  test_a_id   String?
  timestamp   DateTime @default(now())

  test_a test_a? @relation(fields: [test_a_id], references: [id])

  @@index([test_a_id], name: "test_b_test_a_id_index")
}
